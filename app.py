import logging
import smtplib
import aiosqlite
import socks
from urllib.parse import urlparse
from aiogram import Bot, Dispatcher, F, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

API_TOKEN = '7894995841:AAE1I2v8T80Rhcr9elwR6SIla32YjlrgnGo'
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

keyboard_builder = ReplyKeyboardBuilder()
keyboard_builder.add(KeyboardButton(text="üìù –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"))
keyboard_builder.add(KeyboardButton(text="üìú –ò—Å—Ç–æ—Ä–∏—è –æ—Ç–ø—Ä–∞–≤–æ–∫"))
keyboard = keyboard_builder.as_markup(resize_keyboard=True)

class EmailForm(StatesGroup):
    waiting_for_email_data = State()

async def init_db():
    async with aiosqlite.connect("history.db") as db:
        await db.execute("""
            CREATE TABLE IF NOT EXISTS send_history (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                smtp TEXT,
                recipient TEXT,
                subject TEXT,
                message TEXT,
                proxy TEXT,
                status TEXT
            )
        """)
        await db.commit()

@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! üëã –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É:",
        reply_markup=keyboard
    )

@dp.message(F.text == "üìù –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
async def ask_all_info(message: types.Message, state: FSMContext):
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
        "smtp_host|port|log|pass, –ø–æ–ª—É—á–∞—Ç–µ–ª—å, —Ç–µ–º–∞, —Ç–µ–ª–æ –ø–∏—Å—å–º–∞, —Ç–∏–ø_–ø—Ä–æ–∫—Å–∏://ip:port:login:password\n\n"
        "–ü—Ä–∏–º–µ—Ä: smtp.example.com|587|username|password, example@example.com, –¢–µ–º–∞ –ø–∏—Å—å–º–∞, –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç, socks5://192.168.1.1:1080:login:password.\n"
        "–ï—Å–ª–∏ –ø—Ä–æ–∫—Å–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è, –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç'.\n",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.set_state(EmailForm.waiting_for_email_data)

def parse_proxy(proxy_str):
    if not proxy_str or proxy_str.lower() == '–Ω–µ—Ç':
        return None
    
    # –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ '://'
    proxy_parts = proxy_str.split('://')
    
    if len(proxy_parts) != 2:
        raise ValueError("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–∫—Å–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ç–∏–ø://ip:port:login:password")

    proxy_type = proxy_parts[0]
    proxy_info = proxy_parts[1].split(':')

    if len(proxy_info) != 4:
        raise ValueError("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–∫—Å–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç ip:port:login:password")

    proxy_host = proxy_info[0]
    proxy_port = int(proxy_info[1])  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–æ—Ä—Ç –≤ —á–∏—Å–ª–æ
    proxy_username = proxy_info[2]
    proxy_password = proxy_info[3]

    if proxy_type == "socks5":
        proxy_type_code = socks.SOCKS5
    elif proxy_type == "socks4":
        proxy_type_code = socks.SOCKS4
    elif proxy_type == "http":
        proxy_type_code = socks.HTTP
    else:
        raise ValueError("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø –ø—Ä–æ–∫—Å–∏. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è socks5, socks4 –∏ http.")

    return (proxy_type_code, proxy_host, proxy_port, proxy_username, proxy_password)

@dp.message(EmailForm.waiting_for_email_data)
async def send_email(message: types.Message, state: FSMContext):
    try:
        lines = message.text.split(", ")
        smtp_data = lines[0].split("|")
        proxy_data = lines[4] if len(lines) > 4 else None
        recipient = lines[1]
        subject = lines[2]
        body = lines[3]

        smtp_host, smtp_port, smtp_user, smtp_pass = smtp_data
        proxy_settings = parse_proxy(proxy_data)

        if proxy_settings:
            proxy_type_code, proxy_host, proxy_port, proxy_username, proxy_password = proxy_settings
            socks.setdefaultproxy(
                proxy_type=proxy_type_code, 
                addr=proxy_host, 
                port=proxy_port, 
                username=proxy_username, 
                password=proxy_password
            )
            socks.wrapmodule(smtplib)

        msg = MIMEMultipart()
        msg["From"] = smtp_user
        msg["To"] = recipient
        msg["Subject"] = subject
        msg.attach(MIMEText(body, "plain", "utf-8"))

        with smtplib.SMTP(smtp_host, int(smtp_port)) as server:
            server.starttls()
            server.login(smtp_user, smtp_pass)
            server.sendmail(smtp_user, recipient, msg.as_string())
            status = "‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"

        logger.info(f"User: {message.from_user.id}, SMTP: {smtp_host}, Recipient: {recipient}, Subject: {subject}, Message: {body}, Proxy: {proxy_data}")

        async with aiosqlite.connect("history.db") as db:
            await db.execute("""
                INSERT INTO send_history (user_id, smtp, recipient, subject, message, proxy, status)
                VALUES (?, ?, ?, ?, ?, ?, ?)
            """, (message.from_user.id, f"{smtp_host}|{smtp_port}|{smtp_user}", recipient, subject, body, proxy_data, status))
            await db.commit()

        await message.answer(
            "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!\n\n"
            f"üìß –¢–µ–º–∞: {subject}\n"
            f"üì¨ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {recipient}\n"
            f"üìú –¢–µ–ª–æ –ø–∏—Å—å–º–∞: {body}",
            reply_markup=keyboard
        )
    except Exception as e:
        status = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
        logger.error(f"Error from user {message.from_user.id}: {e}")
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –û—à–∏–±–∫–∞: {str(e)}", reply_markup=keyboard)
    finally:
        await state.clear()

@dp.message(F.text == "üìú –ò—Å—Ç–æ—Ä–∏—è –æ—Ç–ø—Ä–∞–≤–æ–∫")
async def show_history(message: types.Message):
    async with aiosqlite.connect("history.db") as db:
        async with db.execute("SELECT smtp, recipient, subject, message, proxy, status FROM send_history WHERE user_id = ?", (message.from_user.id,)) as cursor:
            history = await cursor.fetchall()
            if history:
                history_text = "\n\n".join(
                    [f"üìß SMTP: {row[0]}\nüßë‚Äçüíª –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {row[1]}\nüìú –¢–µ–º–∞: {row[2]}\nüìÑ –°–æ–æ–±—â–µ–Ω–∏–µ: {row[3]}\nüõ† –ü—Ä–æ–∫—Å–∏: {row[4]}\nüìà –°—Ç–∞—Ç—É—Å: {row[5]}" for row in history]
                )
                await message.answer(f"üìú –ò—Å—Ç–æ—Ä–∏—è –æ—Ç–ø—Ä–∞–≤–æ–∫:\n\n{history_text}", reply_markup=keyboard)
            else:
                await message.answer("üìú –ò—Å—Ç–æ—Ä–∏—è –æ—Ç–ø—Ä–∞–≤–æ–∫ –ø—É—Å—Ç–∞.", reply_markup=keyboard)

async def main():
    await init_db()
    await dp.start_polling(bot)

if __name__ == '__main__':
    import asyncio
    asyncio.run(main())